{"info":{"author":"Midhun C Nair","author_email":"midhunch@gmail.com","bugtrack_url":null,"classifiers":["License :: OSI Approved :: MIT License","Operating System :: OS Independent","Programming Language :: Python :: 3"],"description":"Django Redis SDK\n================\n\n0.1.0.0\n-------\n\nDjango Redis SDK: A SDK for connecting to Redis server from Django.\n\n* Supports both TCP socket connection and Unix socket connection\n* Plug and play architecture.\n* Everything is configurable.\n* Supports base client connection in master/slave configuration (Out of box with ``DjangoRedisSDKCache`` backend class).\n* Supports sharded client connection configuration (Out of box with ``DjangoRedisSDKShrededCache`` backend class).\n* You have Dummy Cache backend for just testing or monkey patching (Achieved using ``DjangoRedisSDKDummyCache`` backend class).\n* A wrapper around redis package.\n* Pluggable CLIENT, REDIS_CLIENT, PARSER, COMPRESSOR, SERIALIZER,\n* Out of the box support for Master-Slave and Shard client.\n* supports all default apis.\n* supports redis cluster; **requires** redis-py-cluster\n\n\n\nDependancies\n============\n\n`redis`_>=3.0.1\n`django`_>= 2.2\n`hiredis`_>=1.0.1 (if configured to use)\n`python`_>=3.5.9\n`redis-py-cluster`_>=2.0.0 (if configured to use)\n\n\n\nQuickStart\n==========\n\nInstallation and Basic Configuration\n------------------------------------\n\n1. Install Django Redis SDK by running ``pip install django-redis-sdk``.\n2. Make changes in you settings file to accommodate the cache settings.\n\n.. code:: python\n\n    # DjangoRedisSDKCache -> Master - slave connection\n    CACHES = {\n        'default': {\n            'BACKEND': 'django_redis_sdk.DjangoRedisSDKCache',\n            'KEY_PREFIX': 'production',\n            'LOCATION': [\n                '[<scheme>://][:password@]<host>:<port>',  # Master\n                '[<scheme>://][:password@]<host>:<port>',  # slave 1\n                '[<scheme>://][:password@]<host>:<port>',  # slave 2\n                # ...\n            ],\n            'OPTIONS': {\n                'DB': 0,\n                'PASSWORD': 'passwd',\n                'CLIENT_CLASS': 'django_redis_sdk.clients.BaseClient',\n                'PARSER_CLASS': 'redis.connection.DefaultParser',\n                'CONNECTION_POOL_CLASS': 'redis.connection.ConnectionPool',\n                'CONNECTION_POOL_CLASS_KWARGS': {\n                    'max_connections': 14,\n                },\n                'SERIALIZER_CLASS': 'django_redis_sdk.serializers.PickleSerializer',\n                'PICKLE_VERSION': -1,\n                'SERIALIZER_CLASS_KWARGS': {\n                    'PICKLE_VERSION': -1,\n                },\n                'COMPRESSOR_CLASS': 'django_redis_sdk.compressors.DummyCompressor',\n                'COMPRESS_LEVEL': 5,\n                'COMPRESSOR_CLASS_KWARGS': {\n                    'COMPRESS_LEVEL': 5,\n                },\n                'REDIS_CLIENT_CLASS': 'redis.client.StrictRedis',\n                'REDIS_CLIENT_KWARGS': {},\n                'SOCKET_CONNECT_TIMEOUT': 5,  # in seconds; 5000 milliseconds,\n                'SOCKET_TIMEOUT': 1,  # in seconds; 1000 milliseconds,\n                'HANDLE_EXCEPTIONS': True,\n                'LOG_EXCEPTIONS': True,\n                'LOGGER_NAME': 'django_redis_sdk',\n            }\n        }\n    }\n\n    # DjangoRedisSDKShrededCache -> Shard\n    CACHES = {\n        'default': {\n            'BACKEND': 'django_redis_sdk.DjangoRedisSDKShrededCache',\n            'KEY_PREFIX': 'production',\n            'LOCATION': [\n                '[<scheme>://][:password@]<host>:<port>[/db]',  # read-write 1\n                '[<scheme>://][:password@]<host>:<port>[/db]',  # read-write 2\n                '[<scheme>://][:password@]<host>:<port>[/db]',  # read-write 3\n                # ...\n            ],\n            'OPTIONS': {\n                'DB': 0,\n                'PASSWORD': 'passwd',\n                'CLIENT_CLASS': 'django_redis_sdk.clients.BaseClient',\n                'PARSER_CLASS': 'redis.connection.DefaultParser',\n                'CONNECTION_POOL_CLASS': 'redis.connection.ConnectionPool',\n                'CONNECTION_POOL_CLASS_KWARGS': {\n                    'max_connections': 14,\n                },\n                'SERIALIZER_CLASS': 'django_redis_sdk.serializers.PickleSerializer',\n                'PICKLE_VERSION': -1,\n                'SERIALIZER_CLASS_KWARGS': {\n                    'PICKLE_VERSION': -1,\n                },\n                'COMPRESSOR_CLASS': 'django_redis_sdk.compressors.DummyCompressor',\n                'COMPRESS_LEVEL': 5,\n                'COMPRESSOR_CLASS_KWARGS': {\n                    'COMPRESS_LEVEL': 5,\n                },\n                'REDIS_CLIENT_CLASS': 'redis.client.StrictRedis',\n                'REDIS_CLIENT_KWARGS': {},\n                'SOCKET_CONNECT_TIMEOUT': 5,  # in seconds; 5000 milliseconds,\n                'SOCKET_TIMEOUT': 1,  # in seconds; 1000 milliseconds,\n                'HANDLE_EXCEPTIONS': True,\n                'LOG_EXCEPTIONS': True,\n                'LOGGER_NAME': 'django_redis_sdk',\n            }\n        }\n    }\n\n    # Cluster -> cluster\n    CACHES = {\n        'default': {\n            'BACKEND': 'django_redis_sdk.DjangoRedisSDKCache',\n            'KEY_PREFIX': 'production',\n            'LOCATION': [\n                '[<scheme>://]<host>:<port>[/db]',  # cluster 1\n                '[<scheme>://]<host>:<port>[/db]',  # cluster 2\n                '[<scheme>://]<host>:<port>[/db]',  # cluster 3\n                # ...\n            ],\n            'OPTIONS': {\n                'PARSER_CLASS': 'redis.connection.DefaultParser',\n                'CONNECTION_POOL_CLASS': 'rediscluster.connection.ClusterConnectionPool',\n                'CONNECTION_POOL_CLASS_KWARGS': {\n                    'max_connections': 14,\n                    'skip_full_coverage_check': True,  # some redis implementation has disabled the CONFIG\n                },\n                'SERIALIZER_CLASS': 'django_redis_sdk.serializers.PickleSerializer',\n                'PICKLE_VERSION': -1,\n                'SERIALIZER_CLASS_KWARGS': {\n                    'PICKLE_VERSION': -1,\n                },\n                'COMPRESSOR_CLASS': 'django_redis_sdk.compressors.DummyCompressor',\n                'COMPRESS_LEVEL': 5,\n                'COMPRESSOR_CLASS_KWARGS': {\n                    'COMPRESS_LEVEL': 5,\n                },\n                'REDIS_CLIENT_CLASS': 'rediscluster.RedisCluster',\n                'REDIS_CLIENT_KWARGS': {},\n                'SOCKET_CONNECT_TIMEOUT': 5,  # in seconds; 5000 milliseconds,\n                'SOCKET_TIMEOUT': 1,  # in seconds; 1000 milliseconds,\n                'HANDLE_EXCEPTIONS': True,\n                'LOG_EXCEPTIONS': True,\n                'LOGGER_NAME': 'django_redis_sdk',\n            }\n        }\n    }\n\n\n\nBasic Usage\n===========\n\nDjango Redis SDK has same backend apis as Django with some additions\n\nexample::\n\n    >>>from django.core.cache import cache\n    >>>cache.set('foo', 'bar', timeout=5)  # key = foo, value = 'bar' and valid for 5 seconds\n    >>>cache.ttl('foo')\n    5\n    >>>cache.get('foo')\n    bar\n    >>>cache.set_many({'foo':'boo', 'bar': 'baz'})\n    >>>cache.get_many(['foo', 'baz'])\n    OrderedDict([('foo', 'boo'), ('bar', 'baz')])\n    >>>cache.get_or_set('faz', 'baz', timeout=5)  # key = 'faz', dafault='baz' and valid for 5 seconds\n    baz  # since a key is not the value will be first set and then returned.\n    >>>import random\n    >>>cache.get_or_set('fazo', random.random, timeout=5)  # the default can take a callable also as input.\n    0.32685093104745067  # since the key is not set the random.random is called and the value is set and returned.\n\n\nBACKEND values\n--------------\n\n*  ``django_redis_sdk.DjangoRedisSDKCache``  # for single namespace\n*  ``django_redis_sdk.DjangoRedisSDKShrededCache``  # for sharded namespace\n\nLOCATION values\n---------------\n\n* String: comma seperated string for multiple server, single string value for single server.\n* List: single server in list for single server, multiple list value for multiple servers.\n* scheme:\n        ``host:port``  -> ``127.0.0.1:6379``  -> db defaults to DB option value or '0'.\n        ``host:port/db``  -> ``127.0.0.1:6379/1``  -> db is taken from url.\n        ``:password@host:port``  -> ``:myPasswd@127.0.0.1:6379/1``  -> password taken from url as opposed to None or value in options.\n        ``/path/to/the/unix/socket``  -> ``/etc/redis/connection.sock``  -> uses unix socket for communication\n        ``url_scheme://<combinations of above values>``\n\n        *  ``redis://:passwd@127.0.0.0:6379/1``\n        *  ``rediss://localhost:6379/1`` --> ssl connection\n        * ``unix://path/to/the/unix/socket`` --> unix socket connection\n\n        NOTE: if url_scheme is not specified, we try to best assume the url_scheme; however it is best to provide the scheme.\n\n\nOPTIONS\n-------\n\nDB\n---\n\n**Default**: ``0``\n\nThe URL specified db has precedence over this one.\nIf you with to see the cached values through redis-cli please select the db you assigned before querying by ``SELECT <db>``\n\n\nPASSWORD\n--------\n\n**Default**: ``None``\n\nThe URL specified password has precedence over this one.\nIdeally the REDIS server will be deployed inside a secure network with no access from outside; So, there wouldn't be a password set in that case.\nBut if you have password set, Please configure it here.\n\n\nCLIENT_CLASS\n------------\n\n**Default**: According to the BACKEND.\n\n*  ``django_redis_sdk.clients.BaseClient``  # used as default in ``DjangoRedisSDKCache`` backend\n*  ``django_redis_sdk.clients.ShardedClient``  # used as default in ``DjangoRedisSDKShrededCache`` backend\n\n\nPARSER_CLASS\n------------\n\n**Default**: ``redis.connection.DefaultParser``\n\n* ``redis.connection.PythonParser``\n* ``redis.connection.HiredisParser``  # requires hiredis ``pip install hiredis``\n* ``redis.connection.DefaultParser``  # automatically chooses between python or hiredis (if hiredis available then hiredis else python)\n\n\nCONNECTION_POOL_CLASS\n---------------------\n\n**Default**: ``redis.connection.ConnectionPool``\n\nApply kwargs if any through ``CONNECTION_POOL_CLASS_KWARGS`` options for this class.\n\n* ``redis.connection.ConnectionPool``  # takes additional kwargs ``max_connections``\n* ``redis.connection.BlockingConnectionPool``  # takes additional kwargs ``max_connections``, ``timeout``\n* ``rediscluster.connection.ClusterConnectionPool``  # requires redis-py-cluster ``pip install redis-py-cluster``\n\nSERIALIZER_CLASS\n----------------\n\n**Default**: ``django_redis_sdk.serializers.PickleSerializer``\n\nApply kwargs if any through ``SERIALIZER_CLASS_KWARGS`` options for this class.\n\n*  ``django_redis_sdk.serializers.PickleSerializer``  # python pickle, takes ``PICKLE_VERSION`` options; defaults to -1\n*  ``django_redis_sdk.serializers.DummySerializer``  # no serialization\n*  ``django_redis_sdk.serializers.JsonSerializer``  # json.loads and json.dumbs\n\n\nPICKLE_VERSION\n--------------\n\n**Default**: ``-1``  # for custom SERIALIZER_CLASS you should configure the default value.\n\nUsed along with ``SERIALIZER_CLASS=django_redis_sdk.serializers.PickleSerializer``; Otherwise no effect.\n\n\nCOMPRESSOR_CLASS\n----------------\n\n**Default**: ``django_redis_sdk.compressors.DummyCompressor``\n\nApply kwargs if any through ``COMPRESSOR_CLASS_KWARGS`` options for this class.\n\n*  ``django_redis_sdk.compressors.DummyCompressor``  # no compression\n*  ``django_redis_sdk.compressors.ZlibCompressor``  # requires zlib to compress and decompress, takes ``COMPRESS_LEVEL``\n\nCOMPRESS_LEVEL\n--------------\n\n**Default**: ``5``  # for custom COMPRESSOR_CLASS you should configure the default value.\n\n* Allowed values ``0`` to ``9``\n* ``0`` no compression.\n* ``9`` full compression.\n\n\nREDIS_CLIENT_CLASS\n------------------\n\n**Default**: ``redis.client.Redis``\n\nApply kwargs if any through ``REDIS_CLIENT_KWARGS`` option for this class.\n\n*  ``redis.client.Redis``\n*  ``redis.client.StrictRedis``  # in redis>=3.4.1 this is same as ``redis.client.Redis``\n*  ``rediscluster.RedisCluster``  # requires `redis-py-cluster`_ ; install using ``pip install redis-py-cluster``. For cluster support.\n\n\nSOCKET_CONNECT_TIMEOUT\n----------------------\n\n**Default**: ``None``  # means wait infinitely\n\nThe maximum allowed time to wait to make a connection.\n\n\nSOCKET_TIMEOUT\n--------------\n\n**Default**: ``None``  # means wait infinitely\n\nThe maximum allowed time to wait for an operation to wait (wait for response once after the connection is made).\n\n\nHANDLE_EXCEPTIONS\n-----------------\n\n**Default**: ``False``\n\nWhether to handle exceptions gracefully or propagate it?\nThe exceptions defined in ``django_redis_sdk.utils.EXCEPTIONS_TO_HANDLE`` are caught and handled gracefully\n\n\nLOG_EXCEPTIONS\n--------------\n\n**Default**: ``False``\n\nWhether to log the exceptions While handling the exceptions.\nUsed along with ``HANDLE_EXCEPTIONS``.\n\n\nLOGGER_NAME\n-----------\n\n**Default**: ``__name__``\n\nDefines which python logger to send the logs to while logging the exceptions.\nUsed along with LOG_EXCEPTIONS and HANDLE_EXCEPTIONS.\n\n.. _redis: http://github.com/antirez/redis/\n.. _hiredis: http://github.com/antirez/hiredis/\n.. _python: http://python.org\n.. _django: https://www.djangoproject.com/\n.. _redis-py-cluster: https://github.com/Grokzen/redis-py-cluster\n\n\n","description_content_type":"text/x-rst","docs_url":null,"download_url":"","downloads":{"last_day":-1,"last_month":-1,"last_week":-1},"home_page":"https://github.com/midhuncnair/django_redis_sdk","keywords":"django,redis,django-redis-sdk,redis-cache,cache,django-cache,django-redis-cache","license":"MIT LICENSE","maintainer":"","maintainer_email":"","name":"django-redis-sdk","package_url":"https://pypi.org/project/django-redis-sdk/","platform":"","project_url":"https://pypi.org/project/django-redis-sdk/","project_urls":{"Homepage":"https://github.com/midhuncnair/django_redis_sdk"},"release_url":"https://pypi.org/project/django-redis-sdk/0.1.0.0/","requires_dist":["docutils (>=0.3)","redis (>=3.0.1)","django (>=2.2)"],"requires_python":">=3.5.9","summary":"Django Redis sdk","version":"0.1.0.0"},"last_serial":6806749,"releases":{"0.1.0.0":[{"comment_text":"","digests":{"md5":"6ab09f49fb45e2e7bdd4a4844746acf5","sha256":"a6bdbd4b0ffb5877cc6cc0edca3f28afa17e630bd3e6ea1e15e97a683c3fcf26"},"downloads":-1,"filename":"django_redis_sdk-0.1.0.0-py3-none-any.whl","has_sig":false,"md5_digest":"6ab09f49fb45e2e7bdd4a4844746acf5","packagetype":"bdist_wheel","python_version":"py3","requires_python":">=3.5.9","size":25690,"upload_time":"2020-03-13T15:28:58","upload_time_iso_8601":"2020-03-13T15:28:58.138031Z","url":"https://files.pythonhosted.org/packages/7f/4c/01501b02c9a812af57bd45759abff866c964ab1c63315cbd0b94722a9435/django_redis_sdk-0.1.0.0-py3-none-any.whl"},{"comment_text":"","digests":{"md5":"91c21cd4260d50212f9bc6e85340e544","sha256":"9541f0875751d6f6bf8eef3371dd1b1e393de07b7d926c491c82902b0b1e005d"},"downloads":-1,"filename":"django-redis-sdk-0.1.0.0.tar.gz","has_sig":false,"md5_digest":"91c21cd4260d50212f9bc6e85340e544","packagetype":"sdist","python_version":"source","requires_python":">=3.5.9","size":15999,"upload_time":"2020-03-13T15:29:00","upload_time_iso_8601":"2020-03-13T15:29:00.588741Z","url":"https://files.pythonhosted.org/packages/60/ae/e73d64240a06a7221a6c80b8ab58c9815e01e8325b8f148740c492679d1f/django-redis-sdk-0.1.0.0.tar.gz"}]},"urls":[{"comment_text":"","digests":{"md5":"6ab09f49fb45e2e7bdd4a4844746acf5","sha256":"a6bdbd4b0ffb5877cc6cc0edca3f28afa17e630bd3e6ea1e15e97a683c3fcf26"},"downloads":-1,"filename":"django_redis_sdk-0.1.0.0-py3-none-any.whl","has_sig":false,"md5_digest":"6ab09f49fb45e2e7bdd4a4844746acf5","packagetype":"bdist_wheel","python_version":"py3","requires_python":">=3.5.9","size":25690,"upload_time":"2020-03-13T15:28:58","upload_time_iso_8601":"2020-03-13T15:28:58.138031Z","url":"https://files.pythonhosted.org/packages/7f/4c/01501b02c9a812af57bd45759abff866c964ab1c63315cbd0b94722a9435/django_redis_sdk-0.1.0.0-py3-none-any.whl"},{"comment_text":"","digests":{"md5":"91c21cd4260d50212f9bc6e85340e544","sha256":"9541f0875751d6f6bf8eef3371dd1b1e393de07b7d926c491c82902b0b1e005d"},"downloads":-1,"filename":"django-redis-sdk-0.1.0.0.tar.gz","has_sig":false,"md5_digest":"91c21cd4260d50212f9bc6e85340e544","packagetype":"sdist","python_version":"source","requires_python":">=3.5.9","size":15999,"upload_time":"2020-03-13T15:29:00","upload_time_iso_8601":"2020-03-13T15:29:00.588741Z","url":"https://files.pythonhosted.org/packages/60/ae/e73d64240a06a7221a6c80b8ab58c9815e01e8325b8f148740c492679d1f/django-redis-sdk-0.1.0.0.tar.gz"}]}